{"version":3,"sources":["Face.js","Social.js","App.js","serviceWorker.js","index.js"],"names":["Info","props","react_default","a","createElement","className","src","photo","alt","name","description","Network","App","_useState","useState","_useState2","Object","slicedToArray","profiles","setProfile","useEffect","getProfile","_ref","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","sent","json","stop","apply","this","arguments","map","profile","Face","short_description","image","Social","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNAgCiBA,SA7BJ,SAACC,GACV,OAEAC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,8CACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDAAqDC,IAAKL,EAAMM,MAAOC,IAAI,KAG1FN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0DAA0DJ,EAAMQ,MAG9EP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAEfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAIjBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kEAAkEJ,EAAMS,iBCC5EC,EArBC,WAEZ,OAEIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,4CACdH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4BAEfH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,6BAEFF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAb,sCCiCKO,EA3CH,WAAM,IAAAC,EAGeC,mBAAS,IAHxBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGTK,EAHSH,EAAA,GAGCI,EAHDJ,EAAA,GAMfK,oBAAU,WAEVC,KAEE,IAGH,IAAMA,EAAU,eAAAC,EAAAN,OAAAO,EAAA,EAAAP,CAAAQ,EAAArB,EAAAsB,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAArB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEMC,MACrB,8CAHe,cAEXN,EAFWG,EAAAI,KAAAJ,EAAAE,KAAA,EAKEL,EAASQ,OALX,OAKXP,EALWE,EAAAI,KAMjBf,EAAWS,GANM,wBAAAE,EAAAM,SAAAV,MAAH,yBAAAJ,EAAAe,MAAAC,KAAAC,YAAA,GAShB,OACArC,EAAAC,EAAAC,cAAA,WAEGc,EAASsB,IAAI,SAAAC,GAAO,OACrBvC,EAAAC,EAAAC,cAACsC,EAAD,CACAjC,KAAMgC,EAAQhC,KACdC,YAAa+B,EAAQE,kBACrBpC,MAAQkC,EAAQG,UAIlB1C,EAAAC,EAAAC,cAACyC,EAAD,QC1BkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8fe2c579.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Info = (props) => {\r\n    return(\r\n\r\n    <header className=\"masthead bg-primary text-white text-center\">\r\n     <div className=\"container d-flex align-items-center flex-column\">\r\n      <img className=\"masthead-avatar mb-5 rounded-circle w3-animate-top\" src={props.photo} alt=\"\"/>\r\n\r\n     \r\n      <h1 className=\"masthead-heading text-uppercase mb-0 w3-animate-bottom\">{props.name}</h1>\r\n\r\n      \r\n      <div className=\"divider-custom divider-light\">\r\n        <div className=\"divider-custom-line\"></div>\r\n        <div className=\"divider-custom-icon\">\r\n          <i className=\"fas fa-star\"></i>\r\n        </div>\r\n        <div className=\"divider-custom-line\"></div>\r\n      </div>\r\n\r\n     \r\n      <p className=\"masthead-subheading font-weight-light mb-0  w3-animate-opacity\">{props.description}</p>\r\n\r\n      </div>\r\n  </header>\r\n\r\n  );\r\n\r\n  }\r\n\r\n  export default Info;\r\n","import React from 'react';\r\n\r\n\r\nconst Network = () => {\r\n\r\n    return(\r\n\r\n        <div className=\"row\">\r\n        <div className=\"col-lg-3 col-md-6 mb-5 mb-lg-0\">\r\n          <span className=\"service-icon rounded-circle mx-auto mb-3\">\r\n            <i className=\"icon-screen-smartphone\"></i>\r\n          </span>\r\n          <h4>\r\n            <strong>Responsive</strong>\r\n          </h4>\r\n          <p className=\"text-faded mb-0\">Looks great on any screen size!</p>\r\n        </div>\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Network;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Info from './Face';\nimport Network from './Social.js'\n\nconst App = () => {\n\n  \n  const [profiles, setProfile] = useState([]);\n  \n   \n   useEffect(() => {\n\n   getProfile()\n\n   },[]);\n\n \n  const getProfile = async () => {\n   \n    const response = await fetch(\n      'https://lisboaitest.herokuapp.com/profiles'\n    );\n    const data = await response.json();\n    setProfile(data)\n  }\n\n  return(\n  <div>\n    \n    {profiles.map(profile => ( \n    <Info\n    name={profile.name}\n    description={profile.short_description} \n    photo ={profile.image} \n    />\n    ))}\n\n  <Network/>\n\n  </div> \n\n  );\n\n\n\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}